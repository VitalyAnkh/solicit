var N = null;var searchIndex = {};
searchIndex["solicit"]={"doc":"","items":[[0,"http","solicit","The module implements the framing layer of HTTP/2 and exposes an API for using it.",N,N],[3,"HeaderPart","solicit::http","A convenience struct representing a part of a header (either the name or the value) that can be either an owned or a borrowed byte sequence.",N,N],[3,"Header","","Represents an HTTP/2 header. Allows both the name and the value to be either an owned or a borrowed byte sequence.",N,N],[3,"ConnectionError","","The struct represents a connection error arising on an HTTP/2 connection.",N,N],[3,"WindowSize","","The struct represents the size of a flow control window.",N,N],[3,"Response","","A struct representing the full raw response received on an HTTP/2 connection.",N,N],[12,"stream_id","","The ID of the stream to which the response is associated. HTTP/1.1 does not really have an equivalent to this.",0,N],[12,"headers","","Exposes all the raw response headers, including the meta-headers. (For now the only meta header allowed in HTTP/2 responses is the `:status`.)",0,N],[12,"body","","The full body of the response as an uninterpreted sequence of bytes.",0,N],[3,"Request","","A struct representing a full HTTP/2 request, along with the full body, as a sequence of bytes.",N,N],[12,"stream_id","","",1,N],[12,"headers","","",1,N],[12,"body","","",1,N],[4,"ErrorCode","","The enum represents an error code that are used in `RST_STREAM` and `GOAWAY` frames. These are defined in Section 7 of the HTTP/2 spec.",N,N],[13,"NoError","","The associated condition is not a result of an error. For example, a GOAWAY might include this code to indicate graceful shutdown of a connection.",2,N],[13,"ProtocolError","","The endpoint detected an unspecific protocol error. This error is for use when a more specific error code is not available.",2,N],[13,"InternalError","","The endpoint encountered an unexpected internal error.",2,N],[13,"FlowControlError","","The endpoint detected that its peer violated the flow-control protocol.",2,N],[13,"SettingsTimeout","","The endpoint sent a SETTINGS frame but did not receive a response in a timely manner. See Section 6.5.3 (\"Settings Synchronization\").",2,N],[13,"StreamClosed","","The endpoint received a frame after a stream was half-closed.",2,N],[13,"FrameSizeError","","The endpoint received a frame with an invalid size.",2,N],[13,"RefusedStream","","The endpoint refused the stream prior to performing any application processing (see Section 8.1.4 for details).",2,N],[13,"Cancel","","Used by the endpoint to indicate that the stream is no longer needed.",2,N],[13,"CompressionError","","The endpoint is unable to maintain the header compression context for the connection.",2,N],[13,"ConnectError","","The connection established in response to a CONNECT request (Section 8.3) was reset or abnormally closed.",2,N],[13,"EnhanceYourCalm","","The endpoint detected that its peer is exhibiting a behavior that might be generating excessive load.",2,N],[13,"InadequateSecurity","","The underlying transport has properties that do not meet minimum security requirements (see Section 9.2).",2,N],[13,"Http11Required","","The endpoint requires that HTTP/1.1 be used instead of HTTP/2.",2,N],[4,"HttpError","","An enum representing errors that can arise when performing operations involving an HTTP/2 connection.",N,N],[13,"IoError","","The underlying IO layer raised an error",3,N],[13,"InvalidFrame","","The HTTP/2 connection received an invalid HTTP/2 frame",3,N],[13,"PeerConnectionError","","The peer indicated a connection error",3,N],[13,"CompressionError","","The HPACK decoder was unable to decode a header chunk and raised an error. Any decoder error is fatal to the HTTP/2 connection as it means that the decoder contexts will be out of sync.",3,N],[13,"WindowSizeOverflow","","Indicates that the local peer has discovered an overflow in the size of one of the connection flow control window, which is a connection error.",3,N],[13,"UnknownStreamId","","",3,N],[13,"UnableToConnect","","",3,N],[13,"MalformedResponse","","",3,N],[13,"Other","","",3,N],[4,"HttpScheme","","An enum representing the two possible HTTP schemes.",N,N],[13,"Http","","The variant corresponding to `http://`",4,N],[13,"Https","","The variant corresponding to `https://`",4,N],[0,"frame","","The module contains the implementation of HTTP/2 frames.",N,N],[3,"NoFlag","solicit::http::frame","A helper struct that can be used by all frames that do not define any flags.",N,N],[3,"RawFrame","","A struct that defines the format of the raw HTTP/2 frame, i.e. the frame as it is read from the wire.",N,N],[5,"unpack_header","","Deconstructs a `FrameHeader` into its corresponding 4 components, represented as a 4-tuple: `(length, frame_type, flags, stream_id)`.",N,[[["frameheaderbuffer"]],["frameheader"]]],[5,"pack_header","","Constructs a buffer of 9 bytes that represents the given `FrameHeader`.",N,[[["frameheader"]],["frameheaderbuffer"]]],[0,"builder","","Defines the `FrameBuilder` trait and some default implementations of the trait.",N,N],[8,"FrameBuilder","solicit::http::frame::builder","A trait that provides additional methods for serializing HTTP/2 frames.",N,N],[11,"write_header","","Write the given frame header as the next octets (i.e. without moving the cursor to the beginning of the buffer).",5,[[["self"],["frameheader"]],["result"]]],[11,"overwrite_header","","Overwrite the previously written header, assuming it's the first byte sequence of the buffer.",5,[[["self"],["frameheader"]],["result"]]],[11,"copy_bytes_from","","Copy all available bytes from the given `io::Read` instance.",5,[[["self"],["r"]],["result",["u64"]]]],[11,"write_padding","","Write the given number of padding octets.",5,[[["self"],["u8"]],["result"]]],[11,"write_u32","","Write the given unsigned 32 bit integer to the underlying stream. The integer is written as four bytes in network endian style.",5,[[["self"],["u32"]],["result"]]],[0,"data","solicit::http::frame","The module contains the implementation of the `DATA` frame and associated flags.",N,N],[3,"DataChunk","solicit::http::frame::data","A helper struct that allows the chunk to be either borrowed or owned. Used to provide the `From` implementations that allow us to implement generic methods that accept any type that can be converted into a `DataChunk` (given that the native `Cow` type does not have these implementations and we cannot add them).",N,N],[3,"DataFrame","","A struct representing the DATA frames of HTTP/2, as defined in the HTTP/2 spec, section 6.1.",N,N],[12,"data","","The data found in the frame as an opaque byte sequence. It never includes padding bytes.",6,N],[4,"DataFlag","","An enum representing the flags that a `DataFrame` can have. The integer representation associated to each variant is that flag's bitmask.",N,N],[13,"EndStream","","",7,N],[13,"Padded","","",7,N],[11,"clone","","",7,[[["self"]],["dataflag"]]],[11,"eq","","",7,[[["self"],["dataflag"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"bitmask","","",7,[[["self"]],["u8"]]],[11,"from","","",8,[[["vec",["u8"]]],["datachunk"]]],[11,"from","","",8,N],[11,"eq","","",6,[[["self"],["dataframe"]],["bool"]]],[11,"ne","","",6,[[["self"],["dataframe"]],["bool"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["dataframe"]]],[11,"new","","Creates a new empty `DataFrame`, associated to the stream with the given ID.",6,[[["streamid"]],["dataframe"]]],[11,"with_data","","Creates a new `DataFrame` with the given `DataChunk`.",6,[[["streamid"],["d"]],["dataframe"]]],[11,"is_padded","","Returns `true` if the DATA frame is padded, otherwise false.",6,[[["self"]],["bool"]]],[11,"is_end_of_stream","","Returns whther this frame ends the stream it is associated with.",6,[[["self"]],["bool"]]],[11,"set_padding","","Sets the number of bytes that should be used as padding for this frame.",6,[[["self"],["u8"]]]],[11,"payload_len","","Returns the total length of the payload, taking into account possible padding.",6,[[["self"]],["u32"]]],[11,"set_flag","","Sets the given flag for the frame.",6,[[["self"],["dataflag"]]]],[11,"from_raw","","Creates a new `DataFrame` from the given `RawFrame` (i.e. header and payload), if possible.  Returns `None` if a valid `DataFrame` cannot be constructed from the given `RawFrame`.",6,[[["rawframe"]],["option",["dataframe"]]]],[11,"is_set","","Tests if the given flag is set for the frame.",6,[[["self"],["dataflag"]],["bool"]]],[11,"get_stream_id","","Returns the `StreamId` of the stream to which the frame is associated.",6,[[["self"]],["streamid"]]],[11,"get_header","","Returns a `FrameHeader` based on the current state of the frame.",6,[[["self"]],["frameheader"]]],[11,"serialize_into","","",6,[[["self"],["b"]],["result"]]],[0,"headers","solicit::http::frame","The module contains the implementation of the `HEADERS` frame and associated flags.",N,N],[3,"StreamDependency","solicit::http::frame::headers","The struct represents the dependency information that can be attached to a stream and sent within a HEADERS frame (one with the Priority flag set).",N,N],[12,"stream_id","","The ID of the stream that a particular stream depends on",9,N],[12,"weight","","The weight for the stream. The value exposed (and set) here is always in the range [0, 255], instead of [1, 256] (as defined in section 5.3.2.) so that the value fits into a `u8`.",9,N],[12,"is_exclusive","","A flag indicating whether the stream dependency is exclusive.",9,N],[3,"HeadersFrame","","A struct representing the HEADERS frames of HTTP/2, as defined in the HTTP/2 spec, section 6.2.",N,N],[12,"stream_id","","The ID of the stream with which this frame is associated",10,N],[12,"stream_dep","","The stream dependency information, if any.",10,N],[12,"padding_len","","The length of the padding, if any.",10,N],[4,"HeadersFlag","","An enum representing the flags that a `HeadersFrame` can have. The integer representation associated to each variant is that flag's bitmask.",N,N],[13,"EndStream","","",11,N],[13,"EndHeaders","","",11,N],[13,"Padded","","",11,N],[13,"Priority","","",11,N],[11,"clone","","",11,[[["self"]],["headersflag"]]],[11,"eq","","",11,[[["self"],["headersflag"]],["bool"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"bitmask","","",11,[[["self"]],["u8"]]],[11,"eq","","",9,[[["self"],["streamdependency"]],["bool"]]],[11,"ne","","",9,[[["self"],["streamdependency"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["streamdependency"]]],[11,"new","","Creates a new `StreamDependency` with the given stream ID, weight, and exclusivity.",9,[[["streamid"],["u8"],["bool"]],["streamdependency"]]],[11,"parse","","Parses the first 5 bytes in the buffer as a `StreamDependency`. (Each 5-byte sequence is always decodable into a stream dependency structure).",9,N],[11,"serialize","","Serializes the `StreamDependency` into a 5-byte buffer representing the dependency description, as described in section 6.2. of the HTTP/2 spec:",9,N],[11,"eq","","",10,[[["self"],["headersframe"]],["bool"]]],[11,"ne","","",10,[[["self"],["headersframe"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["headersframe"]]],[11,"new","","Creates a new `HeadersFrame` with the given header fragment and stream ID. No padding, no stream dependency, and no flags are set.",10,[[["vec",["u8"]],["streamid"]],["headersframe"]]],[11,"with_dependency","","Creates a new `HeadersFrame` with the given header fragment, stream ID and stream dependency information. No padding and no flags are set.",10,[[["vec",["u8"]],["streamid"],["streamdependency"]],["headersframe"]]],[11,"is_headers_end","","Returns whether this frame ends the headers. If not, there MUST be a number of follow up CONTINUATION frames that send the rest of the header data.",10,[[["self"]],["bool"]]],[11,"is_end_of_stream","","Returns whther this frame ends the stream it is associated with.",10,[[["self"]],["bool"]]],[11,"set_padding","","Sets the padding length for the frame, as well as the corresponding Padded flag.",10,[[["self"],["u8"]]]],[11,"header_fragment","","",10,N],[11,"set_flag","","Sets the given flag for the frame.",10,[[["self"],["headersflag"]]]],[11,"from_raw","","Creates a new `HeadersFrame` with the given `RawFrame` (i.e. header and payload), if possible.",10,[[["rawframe"]],["option",["headersframe"]]]],[11,"is_set","","Tests if the given flag is set for the frame.",10,[[["self"],["headersflag"]],["bool"]]],[11,"get_stream_id","","Returns the `StreamId` of the stream to which the frame is associated.",10,[[["self"]],["streamid"]]],[11,"get_header","","Returns a `FrameHeader` based on the current state of the `Frame`.",10,[[["self"]],["frameheader"]]],[11,"serialize_into","","",10,[[["self"],["b"]],["result"]]],[0,"rst_stream","solicit::http::frame","The module contains the implementation of the `RST_STREAM` frame.",N,N],[3,"RstStreamFrame","solicit::http::frame::rst_stream","The struct represents the `RST_STREAM` HTTP/2 frame.",N,N],[17,"RST_STREAM_FRAME_LEN","","The total allowed size for the `RST_STREAM` frame payload.",N,N],[17,"RST_STREAM_FRAME_TYPE","","The frame type of the `RST_STREAM` frame.",N,N],[11,"clone","","",12,[[["self"]],["rststreamframe"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["rststreamframe"]],["bool"]]],[11,"ne","","",12,[[["self"],["rststreamframe"]],["bool"]]],[11,"new","","Constructs a new `RstStreamFrame` with the given `ErrorCode`.",12,[[["streamid"],["errorcode"]],["rststreamframe"]]],[11,"with_raw_error_code","","Constructs a new `RstStreamFrame` that will use the given `raw_error_code` for its payload.",12,[[["streamid"],["u32"]],["rststreamframe"]]],[11,"error_code","","Returns the interpreted error code of the frame. Any unknown error codes are mapped into the `InternalError` variant of the enum.",12,[[["self"]],["errorcode"]]],[11,"raw_error_code","","Returns the original raw error code of the frame. If the code is unknown, it will not be changed.",12,[[["self"]],["u32"]]],[11,"from_raw","","",12,[[["rawframe"]],["option"]]],[11,"is_set","","",12,[[["self"],["noflag"]],["bool"]]],[11,"get_stream_id","","",12,[[["self"]],["streamid"]]],[11,"get_header","","",12,[[["self"]],["frameheader"]]],[11,"serialize_into","","",12,[[["self"],["b"]],["result"]]],[0,"settings","solicit::http::frame","The module contains the implementation of the `SETTINGS` frame and associated flags.",N,N],[3,"SettingsFrame","solicit::http::frame::settings","A struct representing the SETTINGS frames of HTTP/2, as defined in the HTTP/2 spec, section 6.5.",N,N],[12,"settings","","Contains all the settings that are currently set in the frame. It is safe to access this field (to read, add, or remove settings), even though a helper method `add_setting` exists.",13,N],[4,"HttpSetting","","An enum that lists all valid settings that can be sent in a SETTINGS frame.",N,N],[13,"HeaderTableSize","","",14,N],[13,"EnablePush","","",14,N],[13,"MaxConcurrentStreams","","",14,N],[13,"InitialWindowSize","","",14,N],[13,"MaxFrameSize","","",14,N],[13,"MaxHeaderListSize","","",14,N],[4,"SettingsFlag","","An enum representing the flags that a `SettingsFrame` can have. The integer representation associated to each variant is that flag's bitmask.",N,N],[13,"Ack","","",15,N],[11,"clone","","",14,[[["self"]],["httpsetting"]]],[11,"eq","","",14,[[["self"],["httpsetting"]],["bool"]]],[11,"ne","","",14,[[["self"],["httpsetting"]],["bool"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"from_id","","Creates a new `HttpSetting` with the correct variant corresponding to the given setting id, based on the settings IDs defined in section 6.5.2.",14,[[["u16"],["u32"]],["option",["httpsetting"]]]],[11,"get_id","","Returns the setting ID as an unsigned 16 bit integer, as defined in section 6.5.2.",14,[[["self"]],["u16"]]],[11,"get_val","","Gets the setting value by unpacking it from the wrapped `u32`.",14,[[["self"]],["u32"]]],[11,"clone","","",15,[[["self"]],["settingsflag"]]],[11,"eq","","",15,[[["self"],["settingsflag"]],["bool"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"bitmask","","",15,[[["self"]],["u8"]]],[11,"eq","","",13,[[["self"],["settingsframe"]],["bool"]]],[11,"ne","","",13,[[["self"],["settingsframe"]],["bool"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["settingsframe"]]],[11,"new","","Creates a new `SettingsFrame`",13,[[],["settingsframe"]]],[11,"new_ack","","A convenience constructor that returns a `SettingsFrame` with the ACK flag already set and no settings.",13,[[],["settingsframe"]]],[11,"add_setting","","Adds the given setting to the frame.",13,[[["self"],["httpsetting"]]]],[11,"set_ack","","Sets the ACK flag for the frame. This method is just a convenience method for calling `frame.set_flag(SettingsFlag::Ack)`.",13,[[["self"]]]],[11,"is_ack","","Checks whether the `SettingsFrame` has an ACK attached to it.",13,[[["self"]],["bool"]]],[11,"set_flag","","Sets the given flag for the frame.",13,[[["self"],["settingsflag"]]]],[11,"from_raw","","Creates a new `SettingsFrame` with the given `RawFrame` (i.e. header and payload), if possible.",13,[[["rawframe"]],["option",["settingsframe"]]]],[11,"is_set","","Tests if the given flag is set for the frame.",13,[[["self"],["settingsflag"]],["bool"]]],[11,"get_stream_id","","Returns the `StreamId` of the stream to which the frame is associated.",13,[[["self"]],["streamid"]]],[11,"get_header","","Returns a `FrameHeader` based on the current state of the `Frame`.",13,[[["self"]],["frameheader"]]],[11,"serialize_into","","",13,[[["self"],["b"]],["result"]]],[0,"goaway","solicit::http::frame","Implements the `GOAWAY` HTTP/2 frame.",N,N],[3,"GoawayFrame","solicit::http::frame::goaway","The struct represents the `GOAWAY` HTTP/2 frame.",N,N],[17,"GOAWAY_MIN_FRAME_LEN","","The minimum size for the `GOAWAY` frame payload. It is 8 octets, as the last stream id and error code are required parts of the GOAWAY frame.",N,N],[17,"GOAWAY_FRAME_TYPE","","The frame type of the `GOAWAY` frame.",N,N],[11,"clone","","",16,[[["self"]],["goawayframe"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["goawayframe"]],["bool"]]],[11,"ne","","",16,[[["self"],["goawayframe"]],["bool"]]],[11,"new","","Create a new `GOAWAY` frame with the given error code and no debug data.",16,[[["streamid"],["errorcode"]],["self"]]],[11,"with_debug_data","","Create a new `GOAWAY` frame with the given parts.",16,N],[11,"error_code","","Returns the interpreted error code of the frame. Any unknown error codes are mapped into the `InternalError` variant of the enum.",16,[[["self"]],["errorcode"]]],[11,"raw_error_code","","Returns the original raw error code of the frame. If the code is unknown, it will not be changed.",16,[[["self"]],["u32"]]],[11,"last_stream_id","","Returns the associated last stream ID.",16,[[["self"]],["streamid"]]],[11,"debug_data","","Returns the debug data associated with the frame.",16,[[["self"]],["option"]]],[11,"payload_len","","Returns the total length of the frame's payload, including any debug data.",16,[[["self"]],["u32"]]],[11,"from_raw","","",16,[[["rawframe"]],["option"]]],[11,"is_set","","",16,[[["self"],["noflag"]],["bool"]]],[11,"get_stream_id","","",16,[[["self"]],["streamid"]]],[11,"get_header","","",16,[[["self"]],["frameheader"]]],[11,"serialize_into","","",16,[[["self"],["b"]],["result"]]],[0,"ping","solicit::http::frame","Implements the `PING` HTTP/2 frame.",N,N],[3,"PingFlag","solicit::http::frame::ping","",N,N],[3,"PingFrame","","The struct represents the `PINg` HTTP/2 frame.",N,N],[17,"PING_FRAME_LEN","","Ping frames are always 8 bytes",N,N],[17,"PING_FRAME_TYPE","","The frame type of the `PING` frame.",N,N],[11,"bitmask","","",17,[[["self"]],["u8"]]],[11,"clone","","",18,[[["self"]],["pingframe"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["pingframe"]],["bool"]]],[11,"ne","","",18,[[["self"],["pingframe"]],["bool"]]],[11,"new","","Create a new `PING` frame",18,[[],["self"]]],[11,"new_ack","","Create a new PING frame with ACK set",18,[[["u64"]],["self"]]],[11,"with_data","","Create a new `PING` frame with the given opaque_data",18,[[["u64"]],["self"]]],[11,"is_ack","","",18,[[["self"]],["bool"]]],[11,"opaque_data","","",18,[[["self"]],["u64"]]],[11,"from_raw","","",18,[[["rawframe"]],["option"]]],[11,"is_set","","",18,[[["self"],["pingflag"]],["bool"]]],[11,"get_stream_id","","",18,[[["self"]],["streamid"]]],[11,"get_header","","",18,[[["self"]],["frameheader"]]],[11,"serialize_into","","",18,[[["self"],["b"]],["result"]]],[0,"window_update","solicit::http::frame","Implements the `WINDOW_UPDATE` HTTP/2 frame.",N,N],[3,"WindowUpdateFrame","solicit::http::frame::window_update","The struct represents the `WINDOW_UPDATE` HTTP/2 frame.",N,N],[17,"WINDOW_UPDATE_FRAME_LEN","","The minimum size for the `WINDOW_UPDATE` frame payload.",N,N],[17,"WINDOW_UPDATE_FRAME_TYPE","","The frame type of the `WINDOW_UPDATE` frame.",N,N],[11,"clone","","",19,[[["self"]],["windowupdateframe"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["windowupdateframe"]],["bool"]]],[11,"ne","","",19,[[["self"],["windowupdateframe"]],["bool"]]],[11,"for_connection","","Creates a new `WindowUpdateFrame` that will increment the connection-level window by the given increment.",19,[[["u32"]],["windowupdateframe"]]],[11,"for_stream","","Creates a new `WindowUpdateFrame` that will increment the given stream's window by the given increment.",19,[[["streamid"],["u32"]],["windowupdateframe"]]],[11,"increment","","Returns the window increment indicated by the frame.",19,[[["self"]],["u32"]]],[11,"from_raw","","",19,[[["rawframe"]],["option"]]],[11,"is_set","","",19,[[["self"],["noflag"]],["bool"]]],[11,"get_stream_id","","",19,[[["self"]],["streamid"]]],[11,"get_header","","",19,[[["self"]],["frameheader"]]],[11,"serialize_into","","",19,[[["self"],["b"]],["result"]]],[6,"FrameHeaderBuffer","solicit::http::frame","An alias for the 9-byte buffer that each HTTP/2 frame header must be stored in.",N,N],[6,"FrameHeader","","An alias for the 4-tuple representing the components of each HTTP/2 frame header.",N,N],[17,"FRAME_HEADER_LEN","","",N,N],[8,"FrameIR","","A trait that types that are an intermediate representation of HTTP/2 frames should implement. It allows us to generically serialize any intermediate representation into an on-the-wire representation.",N,N],[10,"serialize_into","","Write out the on-the-wire representation of the frame into the given `FrameBuilder`.",20,[[["self"],["b"]],["result"]]],[8,"Flag","","A trait that all HTTP/2 frame header flags need to implement.",N,N],[10,"bitmask","","Returns a bit mask that represents the flag.",21,[[["self"]],["u8"]]],[8,"Frame","","A trait that all HTTP/2 frame structs need to implement.",N,N],[16,"FlagType","","The type that represents the flags that the particular `Frame` can take. This makes sure that only valid `Flag`s are used with each `Frame`.",22,N],[10,"from_raw","","Creates a new `Frame` from the given `RawFrame` (i.e. header and payload), if possible.",22,[[["rawframe"]],["option"]]],[10,"is_set","","Tests if the given flag is set for the frame.",22,N],[10,"get_stream_id","","Returns the `StreamId` of the stream to which the frame is associated",22,[[["self"]],["streamid"]]],[10,"get_header","","Returns a `FrameHeader` based on the current state of the `Frame`.",22,[[["self"]],["frameheader"]]],[11,"bitmask","","",23,[[["self"]],["u8"]]],[11,"eq","","",24,[[["self"],["rawframe"]],["bool"]]],[11,"ne","","",24,[[["self"],["rawframe"]],["bool"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",24,[[["self"]],["rawframe"]]],[11,"parse","","Parses a `RawFrame` from the bytes starting at the beginning of the given buffer.",24,N],[11,"len","","Returns the total length of the `RawFrame`, including both headers, as well as the entire payload.",24,[[["self"]],["usize"]]],[11,"serialize","","Returns a `Vec` of bytes representing the serialized (on-the-wire) representation of this raw frame.",24,[[["self"]],["vec",["u8"]]]],[11,"header","","Returns a `FrameHeader` instance corresponding to the headers of the `RawFrame`.",24,[[["self"]],["frameheader"]]],[11,"payload","","Returns a slice representing the payload of the `RawFrame`.",24,N],[11,"into","","",24,[[["self"]],["vec",["u8"]]]],[11,"as_ref","","",24,N],[11,"from","","",24,[[["vec",["u8"]]],["rawframe"]]],[11,"from","","",24,N],[11,"serialize_into","","",24,[[["self"],["b"]],["result"]]],[0,"transport","solicit::http","The module contains implementations of the transport layer functionality that HTTP/2 requires. It exposes APIs that allow the HTTP/2 connection to use the transport layer without requiring it to know which exact implementation they are using (e.g. a clear-text TCP connection, a TLS protected connection, or even a mock implementation).",N,N],[3,"TransportReceiveFrame","solicit::http::transport","The struct is a an implementation of the `ReceiveFrame` trait that wraps an existing `TransportStream` and uses it to provide HTTP/2 frames, when asked for one, by reading from the stream. The implementation always allocates a new buffer on the heap for every incoming frame.",N,N],[8,"TransportStream","","A trait that any struct that wants to provide the transport layer for HTTP/2 needs to implement.",N,N],[11,"read_exact","","A convenience method that performs as many `read` calls on the underlying `Read` implementation as it takes to fill the given buffer.",25,N],[10,"try_split","","Attempts to split the `TransportStream` instance into a new independently owned handle to the same underlying stream.",25,[[["self"]],["result",["error"]]]],[10,"close","","Attempts to shutdown both ends of the transport stream.",25,[[["self"]],["result",["error"]]]],[11,"new","","Create a new `TransportReceiveFrame` that will use the given `TransportStream` for reading the frame.",26,[[["ts"]],["transportreceiveframe"]]],[11,"recv_frame","","",26,[[["self"]],["httpresult",["httpframe"]]]],[0,"connection","solicit::http","The module contains the implementation of an HTTP/2 connection.",N,N],[3,"HttpConnection","solicit::http::connection","The struct implements the HTTP/2 connection level logic.",N,N],[12,"scheme","","The scheme of the connection",27,N],[3,"DataChunk","","The struct represents a chunk of data that should be sent to the peer on a particular stream.",N,N],[12,"data","","The data that should be sent.",28,N],[12,"stream_id","","The ID of the stream on which the data should be sent.",28,N],[12,"end_stream","","Whether the data chunk will also end the stream.",28,N],[3,"HttpConnectionSender","","The struct represents an `HttpConnection` that has been bound to a `SendFrame` reference, allowing it to send frames. It exposes convenience methods for various send operations that can be invoked on the underlying stream. The methods prepare the appropriate frames and queue their sending on the referenced `SendFrame` instance.",N,N],[4,"HttpFrame","","An enum representing all frame variants that can be returned by an `HttpConnection` can handle.",N,N],[13,"DataFrame","","",29,N],[13,"HeadersFrame","","",29,N],[13,"RstStreamFrame","","",29,N],[13,"SettingsFrame","","",29,N],[13,"PingFrame","","",29,N],[13,"GoawayFrame","","",29,N],[13,"WindowUpdateFrame","","",29,N],[13,"UnknownFrame","","",29,N],[4,"SendStatus","","The enum represents the success status of the operation of sending a next data chunk on an HTTP/2 connection.",N,N],[13,"Sent","","Indicates that a DATA frame was successfully sent",30,N],[13,"Nothing","","Indicates that nothing was sent, but that no errors occurred.",30,N],[4,"EndStream","","An enum indicating whether the `HttpConnection` send operation should end the stream.",N,N],[13,"Yes","","The stream should be closed",31,N],[13,"No","","The stream should still be kept open",31,N],[8,"SendFrame","","A trait that should be implemented by types that can provide the functionality of sending HTTP/2 frames.",N,N],[10,"send_frame","","Queue the given frame for immediate sending to the peer. It is the responsibility of each individual `SendFrame` implementation to correctly serialize the given `FrameIR` into an appropriate buffer and make sure that the frame is subsequently eventually pushed to the peer.",32,[[["self"],["f"]],["httpresult"]]],[8,"ReceiveFrame","","A trait that should be implemented by types that can provide the functionality of receiving HTTP/2 frames.",N,N],[10,"recv_frame","","Return a new `HttpFrame` instance. Unknown frames can be wrapped in the `HttpFrame::UnknownFrame` variant (i.e. their `RawFrame` representation).",33,[[["self"]],["httpresult",["httpframe"]]]],[11,"eq","","",29,[[["self"],["httpframe"]],["bool"]]],[11,"ne","","",29,[[["self"],["httpframe"]],["bool"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"clone","","",29,[[["self"]],["httpframe"]]],[11,"from_raw","","",29,[[["rawframe"]],["httpresult",["httpframe"]]]],[11,"clone","","",30,[[["self"]],["sendstatus"]]],[11,"eq","","",30,[[["self"],["sendstatus"]],["bool"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `DataChunk`.",28,[[["cow"],["streamid"],["endstream"]],["datachunk"]]],[11,"new_borrowed","","Creates a new `DataChunk` from a borrowed slice. This method should become obsolete if we can take an `Into<Cow<_, _>>` without using unstable features.",28,[[["d"],["streamid"],["endstream"]],["datachunk"]]],[11,"clone","","",31,[[["self"]],["endstream"]]],[11,"eq","","",31,[[["self"],["endstream"]],["bool"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"rst_stream","","Send a RST_STREAM frame for the given frame id",34,[[["self"],["streamid"],["errorcode"]],["httpresult"]]],[11,"send_settings_ack","","Sends a SETTINGS acknowledge frame to the peer.",34,[[["self"]],["httpresult"]]],[11,"send_ping_ack","","Sends a PING ack",34,[[["self"],["u64"]],["httpresult"]]],[11,"send_ping","","Sends a PING request",34,[[["self"],["u64"]],["httpresult"]]],[11,"send_headers","","A helper function that inserts the frames required to send the given headers onto the `SendFrame` stream.",34,[[["self"],["h"],["streamid"],["endstream"]],["httpresult"]]],[11,"send_data","","A helper function that inserts a frame representing the given data into the `SendFrame` stream. In doing so, the connection's outbound flow control window is adjusted appropriately.",34,[[["self"],["datachunk"]],["httpresult"]]],[11,"send_next_data","","Sends the chunk of data provided by the given `DataPrioritizer`.",34,[[["self"],["p"]],["httpresult",["sendstatus"]]]],[11,"new","","Creates a new `HttpConnection` that will use the given sender for writing frames.",27,[[["httpscheme"]],["httpconnection"]]],[11,"sender","","Creates a new `HttpConnectionSender` instance that will use the given `SendFrame` instance to send the frames that it prepares. This is a convenience struct so that clients do not have to pass the same `sender` reference to multiple send methods.",27,[[["self"],["s"]],["httpconnectionsender"]]],[11,"in_window_size","","Returns the current size of the inbound flow control window (i.e. the number of octets that the connection will accept and the peer will send at most, unless the window is updated).",27,[[["self"]],["i32"]]],[11,"out_window_size","","Returns the current size of the outbound flow control window (i.e. the number of octets that can be sent on the connection to the peer without violating flow control).",27,[[["self"]],["i32"]]],[11,"expect_settings","","The method processes the next frame provided by the given `ReceiveFrame` instance, expecting it to be a SETTINGS frame. Additionally, the frame cannot be an ACK settings frame, but rather it should contain the peer's settings.",27,[[["self"],["recv"],["sess"]],["httpresult"]]],[11,"handle_next_frame","","Handles the next frame incoming on the given `ReceiveFrame` instance.",27,[[["self"],["recv"],["sess"]],["httpresult"]]],[0,"session","solicit::http","Defines the interface for the session-level management of HTTP/2 communication. This is effectively an API that allows hooking into an HTTP/2 connection in order to handle events arising on the connection.",N,N],[3,"StreamIter","solicit::http::session","A newtype for an iterator over `Stream`s saved in a `SessionState`.",N,N],[3,"Client","","A phantom type for the `DefaultSessionState` struct that indicates that the struct should be geared for a client session.",N,N],[3,"Server","","A phantom type for the `DefaultSessionState` struct that indicates that the struct should be geared for a server session.",N,N],[3,"DefaultSessionState","","An implementation of the `SessionState` trait that tracks the active streams in a `HashMap`, mapping the stream ID to the concrete `Stream` instance.",N,N],[3,"DefaultStream","","An implementation of the `Stream` trait that saves all headers and data in memory.",N,N],[12,"stream_id","","The ID of the stream, if already assigned by the connection.",35,N],[12,"headers","","The headers associated with the stream (i.e. the response headers)",35,N],[12,"body","","The body of the stream (i.e. the response body)",35,N],[12,"state","","The current stream state.",35,N],[4,"StreamState","","The enum represents all the states that an HTTP/2 stream can be found in.",N,N],[13,"Idle","","",36,N],[13,"ReservedLocal","","",36,N],[13,"ReservedRemote","","",36,N],[13,"Open","","",36,N],[13,"HalfClosedRemote","","",36,N],[13,"HalfClosedLocal","","",36,N],[13,"Closed","","",36,N],[4,"StreamDataError","","The enum represents errors that can be returned from the `Stream::get_data_chunk` method.",N,N],[13,"Closed","","Indicates that the stream cannot provide any data, since it is closed for further writes from the peer's side.",37,N],[13,"Other","","A different error while trying to obtain the data chunk. Wraps a boxed `Error` impl.",37,N],[4,"StreamDataChunk","","The enum represents the successful completion of the `Stream::get_data_chunk` method.",N,N],[13,"Chunk","","A data chunk of the given size, after which more chunks can follow.",38,N],[13,"Last","","The chunk was the last one that the stream will ever write.",38,N],[13,"Unavailable","","No data currently available, but the stream isn't closed yet",38,N],[5,"default_client_state","","Create a new `DefaultSessionState` for a client session. This function is a workaround required due to rust-lang/rust#29023.",N,[[],["defaultsessionstate",["client"]]]],[5,"default_server_state","","Create a new `DefaultSessionState` for a server session. This function is a workaround required due to rust-lang/rust#29023.",N,[[],["defaultsessionstate",["server"]]]],[8,"Session","","A trait that defines the interface between an `HttpConnection` and the higher-levels that use it. Essentially, it allows the `HttpConnection` to pass information onto those higher levels through a well-defined interface.",N,N],[10,"new_data_chunk","","Notifies the `Session` that a new data chunk has arrived on the connection for a particular stream. Only the raw data is passed to the callback (all padding is already discarded by the connection).",39,N],[10,"new_headers","","Notifies the `Session` that headers have arrived for a particular stream. The given list of headers is already decoded by the connection. TODO: The Session should be notified separately for every header that is decoded.",39,[[["self"],["streamid"],["vec",["header"]],["httpconnection"]],["httpresult"]]],[10,"end_of_stream","","Notifies the `Session` that a particular stream got closed by the peer.",39,[[["self"],["streamid"],["httpconnection"]],["httpresult"]]],[10,"rst_stream","","Notifies the `Session` that a particular stream was reset by the peer and provides the reason behind it.",39,[[["self"],["streamid"],["errorcode"],["httpconnection"]],["httpresult"]]],[10,"new_settings","","Notifies the `Session` that the peer has sent a new set of settings. The session itself is responsible for acknowledging the receipt of the settings.",39,[[["self"],["vec",["httpsetting"]],["httpconnection"]],["httpresult"]]],[10,"on_ping","","Notifies the `Session` that a PING request has been received. The session itself is responsible for replying with an ACK.",39,[[["self"],["pingframe"],["httpconnection"]],["httpresult"]]],[10,"on_pong","","Notifies the `Session` that a PING acknowledgement has been received.",39,[[["self"],["pingframe"],["httpconnection"]],["httpresult"]]],[11,"on_goaway","","Notifies the `Session` that the peer has sent a GOAWAY frame, indicating that the connection is terminated.",39,[[["self"],["streamid"],["errorcode"],["option"],["httpconnection"]],["httpresult"]]],[8,"SessionState","","A trait defining a set of methods for accessing and influencing an HTTP/2 session's state.",N,N],[16,"Stream","","The type of the `Stream` that the `SessionState` manages.",40,N],[10,"insert_outgoing","","Inserts the given `Stream` into the session's state, starting to track it. The `SessionState` should assign it the next available outgoing stream ID.",40,N],[10,"insert_incoming","","Inserts the given `Stream` into the session's state, considering it an incoming stream. TODO(mlalic): Allow the exact error to propagate out.",40,N],[10,"get_stream_ref","","Returns a reference to a `Stream` with the given `StreamId`, if it is found in the current session.",40,[[["self"],["streamid"]],["option"]]],[10,"get_stream_mut","","Returns a mutable reference to a `Stream` with the given `StreamId`, if it is found in the current session.",40,[[["self"],["streamid"]],["option"]]],[10,"remove_stream","","Removes the stream with the given `StreamId` from the session. If the stream was found in the session, it is returned in the result.",40,[[["self"],["streamid"]],["option"]]],[10,"iter","","Returns an iterator over the streams currently found in the session.",40,[[["self"]],["streamiter"]]],[10,"len","","The number of streams tracked by this state object",40,[[["self"]],["usize"]]],[11,"get_closed","","Returns all streams that are closed and tracked by the session state.",40,[[["self"]],["vec"]]],[8,"Stream","","A trait representing a single HTTP/2 stream. An HTTP/2 connection multiplexes a number of streams.",N,N],[10,"new_data_chunk","","Handle a new data chunk that has arrived for the stream.",41,N],[10,"set_headers","","Set headers for a stream. A stream is only allowed to have one set of headers.",41,[[["self"],["vec",["header"]]]]],[10,"set_state","","Sets the stream state to the newly provided state.",41,[[["self"],["streamstate"]]]],[11,"on_rst_stream","","Invoked when the session detects that the peer has reset the stream (i.e. sent a RST_STREAM frame for this stream).",41,[[["self"],["errorcode"]]]],[10,"get_data_chunk","","Places the next data chunk that should be written onto the stream into the given buffer.",41,N],[10,"state","","Returns the current state of the stream.",41,[[["self"]],["streamstate"]]],[11,"close","","Transitions the stream state to closed. After this, the stream is considered to be closed for any further reads or writes.",41,[[["self"]]]],[11,"close_local","","Updates the `Stream` status to indicate that it is closed locally.",41,[[["self"]]]],[11,"close_remote","","Updates the `Stream` status to indicate that it is closed on the remote peer's side.",41,[[["self"]]]],[11,"is_closed","","Returns whether the stream is closed.",41,[[["self"]],["bool"]]],[11,"is_closed_local","","Returns whether the stream is closed locally.",41,[[["self"]],["bool"]]],[11,"is_closed_remote","","Returns whether the remote peer has closed the stream. This includes a fully closed stream.",41,[[["self"]],["bool"]]],[11,"next","","",42,[[["self"]],["option"]]],[11,"new","","Creates a new `DefaultSessionState` for a client session with no known streams.",43,[[],["defaultsessionstate",["client"]]]],[11,"new","","Creates a new `DefaultSessionState` for a server session with no known streams.",43,[[],["defaultsessionstate",["server"]]]],[11,"insert_outgoing","","",43,N],[11,"insert_incoming","","",43,N],[11,"get_stream_ref","","",43,[[["self"],["streamid"]],["option"]]],[11,"get_stream_mut","","",43,[[["self"],["streamid"]],["option"]]],[11,"remove_stream","","",43,[[["self"],["streamid"]],["option"]]],[11,"iter","","",43,[[["self"]],["streamiter"]]],[11,"len","","Number of currently active streams",43,[[["self"]],["usize"]]],[11,"clone","","",36,[[["self"]],["streamstate"]]],[11,"eq","","",36,[[["self"],["streamstate"]],["bool"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"from","","",37,[[["e"]],["streamdataerror"]]],[11,"clone","","",38,[[["self"]],["streamdatachunk"]]],[11,"eq","","",38,[[["self"],["streamdatachunk"]],["bool"]]],[11,"ne","","",38,[[["self"],["streamdatachunk"]],["bool"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"clone","","",35,[[["self"]],["defaultstream"]]],[11,"new","","Create a new `DefaultStream`, where the ID is not yet assigned.",35,[[],["defaultstream"]]],[11,"with_id","","Create a new `DefaultStream` with the given ID.",35,[[["streamid"]],["defaultstream"]]],[11,"set_full_data","","Sets the outgoing data of the stream to the given `Vec`.",35,[[["self"],["vec",["u8"]]]]],[11,"new_data_chunk","","",35,N],[11,"set_headers","","",35,[[["self"],["vec",["header"]]]]],[11,"set_state","","",35,[[["self"],["streamstate"]]]],[11,"state","","",35,[[["self"]],["streamstate"]]],[11,"get_data_chunk","","",35,N],[0,"priority","solicit::http","The module exposes an API for defining data prioritization strategies.",N,N],[3,"SimplePrioritizer","solicit::http::priority","An implementation of the `DataPrioritizer` trait that is based on finding the first stream from the given `SessionState` instance that can send data and returning this chunk.",N,N],[8,"DataPrioritizer","","A trait that types that want to provide data to an HTTP/2 connection need to implement.",N,N],[10,"get_next_chunk","","Returns the next `DataChunk` that should be sent on the HTTP/2 connection. `None` indicates that currently there was no data that could be sent at that point.",44,[[["self"]],["httpresult",["option"]]]],[11,"new","","Creates a new `SimplePrioritizer` that will use the given state to find stream data that should be sent and use the given buffer to hold the data of the returned chunk.",45,N],[11,"get_next_chunk","","",45,[[["self"]],["httpresult",["option"]]]],[0,"client","solicit::http","The module contains a number of reusable components for implementing the client side of an HTTP/2 connection.",N,N],[3,"ClientStream","solicit::http::client","A convenience wrapper type that represents an established client network transport stream. It wraps the stream itself, the scheme of the protocol to be used, and the remote host name.",N,N],[12,"0","","",46,N],[12,"1","","",46,N],[12,"2","","",46,N],[3,"CleartextConnector","","A struct that establishes a cleartext TCP connection that can be used by an HTTP/2 connection. Defaults to using port 80.",N,N],[12,"host","","The host to which the connection should be established",47,N],[12,"port","","The port on which the connection should be established",47,N],[3,"CleartextConnectError","","A newtype wrapping the `io::Error`, as it occurs when attempting to establish an HTTP/2 connection over cleartext TCP (with prior knowledge).",N,N],[3,"RequestStream","","A struct representing a request stream. It provides the headers that are to be sent when initiating the request, as well as a `Stream` instance that handles the received response and provides the request body.",N,N],[12,"headers","","The list of headers that will be sent with the request.",48,N],[12,"stream","","The underlying `Stream` instance, which will handle the response, as well as optionally provide the body of the request.",48,N],[3,"ClientConnection","","The struct extends the `HttpConnection` API with client-specific methods (such as `start_request`) and wires the `HttpConnection` to the client `Session` callbacks.",N,N],[12,"state","","The state of the session associated to this client connection. Maintains the status of the connection streams.",49,N],[3,"ClientSession","","An implementation of the `Session` trait specific to handling client HTTP/2 connections.",N,N],[5,"write_preface","","Writes the client preface to the given `io::Write` instance.",N,[[["w"]],["result",["error"]]]],[0,"tls","","The module contains helpers for implementing TLS-based client connections.",N,N],[3,"TlsConnector","solicit::http::client::tls","A struct implementing the functionality of establishing a TLS-backed TCP stream that can be used by an HTTP/2 connection. Takes care to set all the TLS options to those allowed by the HTTP/2 spec, as well as of the protocol negotiation.",N,N],[12,"host","","",50,N],[4,"TlsConnectError","","An enum representing possible errors that can arise when trying to establish an HTTP/2 connection over TLS.",N,N],[13,"IoError","","The variant corresponds to the underlying raw TCP connection returning an error.",51,N],[13,"SslError","","The variant corresponds to the TLS negotiation returning an error.",51,N],[13,"Http2NotSupported","","The variant corresponds to the case when the TLS connection is established, but the application protocol that was negotiated didn't end up being HTTP/2. It wraps the established SSL stream in order to allow the client to decide what to do with it (and the application protocol that was chosen).",51,N],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"description","","",51,[[["self"]],["str"]]],[11,"cause","","",51,[[["self"]],["option",["error"]]]],[11,"from","","",51,[[["error"]],["tlsconnecterror"]]],[11,"from","","",51,[[["sslerror"]],["tlsconnecterror"]]],[11,"new","","Creates a new `TlsConnector` that will create a new `SslContext` before trying to establish the TLS connection. The path to the CA file that the context will use needs to be provided.",50,[[["str"],["p"]],["tlsconnector"]]],[11,"with_context","","Creates a new `TlsConnector` that will use the provided context to create the `SslStream` that will back the HTTP/2 connection.",50,[[["str"],["sslcontext"]],["tlsconnector"]]],[11,"build_default_context","","Builds up a default `SslContext` instance wth TLS settings that the HTTP/2 spec mandates. The path to the CA file needs to be provided.",50,[[["path"]],["result",["sslcontext","tlsconnecterror"]]]],[11,"connect","","",50,[[["self"]],["result",["clientstream","tlsconnecterror"]]]],[8,"HttpConnectError","solicit::http::client","A marker trait for errors raised by attempting to establish an HTTP/2 connection.",N,N],[8,"HttpConnect","","A trait that can be implemented by structs that want to provide the functionality of establishing network connections for use by HTTP/2 connections.",N,N],[16,"Stream","","The type of the underlying transport stream that the `HttpConnection`s produced by this `HttpConnect` implementation will be based on.",52,N],[16,"Err","","The type of the error that can be produced by trying to establish the connection (i.e. calling the `connect` method).",52,N],[10,"connect","","Establishes a network connection that can be used by HTTP/2 connections.",52,[[["self"]],["result",["clientstream"]]]],[11,"from","solicit::http","",3,[[["e"]],["httperror"]]],[11,"new","solicit::http::client","Creates a new `CleartextConnector` that will attempt to establish a connection to the given host on port 80.",47,[[["str"]],["cleartextconnector"]]],[11,"with_port","","Creates a new `CleartextConnector` that will attempt to establish a connection to the given host on the given port.",47,[[["str"],["u16"]],["cleartextconnector"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"description","","",53,[[["self"]],["str"]]],[11,"cause","","",53,[[["self"]],["option",["error"]]]],[11,"from","","",53,[[["error"]],["cleartextconnecterror"]]],[11,"connect","","Establishes a cleartext TCP connection based on the host and port. If it is not possible, returns an `HttpError`.",47,[[["self"]],["result",["clientstream","cleartextconnecterror"]]]],[11,"with_connection","","Creates a new `ClientConnection` that will use the given `HttpConnection` for all its underlying HTTP/2 communication.",49,[[["httpconnection"],["state"]],["clientconnection"]]],[11,"scheme","","Returns the scheme of the underlying `HttpConnection`.",49,[[["self"]],["httpscheme"]]],[11,"expect_settings","","Handles the next frame provided by the given frame receiver and expects it to be a `SETTINGS` frame. If it is not, it returns an error.",49,[[["self"],["recv"],["sender"]],["httpresult"]]],[11,"start_request","","Starts a new request based on the given `RequestStream`.",49,[[["self"],["requeststream"],["s"]],["httpresult",["streamid"]]]],[11,"send_ping","","Send a PING",49,[[["self"],["s"]],["httpresult"]]],[11,"handle_next_frame","","Fully handles the next incoming frame provided by the given `ReceiveFrame` instance. Handling a frame may cause changes to the session state exposed by the `ClientConnection`.",49,[[["self"],["recv"],["sender"]],["httpresult"]]],[11,"send_next_data","","Queues a new DATA frame onto the underlying `SendFrame`.",49,[[["self"],["s"]],["httpresult",["sendstatus"]]]],[11,"new","","Returns a new `ClientSession` associated to the given state.",54,[[["state"],["s"]],["clientsession"]]],[11,"new_data_chunk","","",54,N],[11,"new_headers","","",54,[[["self"],["streamid"],["vec",["header"]],["httpconnection"]],["httpresult"]]],[11,"end_of_stream","","",54,[[["self"],["streamid"],["httpconnection"]],["httpresult"]]],[11,"rst_stream","","",54,[[["self"],["streamid"],["errorcode"],["httpconnection"]],["httpresult"]]],[11,"new_settings","","",54,[[["self"],["vec",["httpsetting"]],["httpconnection"]],["httpresult"]]],[11,"on_ping","","",54,[[["self"],["pingframe"],["httpconnection"]],["httpresult"]]],[11,"on_pong","","",54,[[["self"],["pingframe"],["httpconnection"]],["httpresult"]]],[0,"server","solicit::http","The module contains a number of reusable components for implementing the server side of an HTTP/2 connection.",N,N],[3,"ServerSession","solicit::http::server","An implementation of the `Session` trait for a server-side HTTP/2 connection.",N,N],[3,"ServerConnection","","The struct provides a more convenient API for server-related functionality of an HTTP/2 connection, such as sending a response back to the client.",N,N],[12,"state","","The state of the session associated to this client connection. Maintains the status of the connection streams.",55,N],[8,"StreamFactory","","The `ServerSession` requires an instance of a type that implements this trait in order to create a new `Stream` instance once it detects that a client has initiated a new stream. The factory should take care to provide an appropriate `Stream` implementation that will be able to handle reading the request and generating the response, according to the needs of the underlying application.",N,N],[16,"Stream","","",56,N],[10,"create","","Create a new `Stream` with the given ID.",56,N],[11,"new","","",57,[[["state"],["f"],["s"]],["serversession"]]],[11,"new_data_chunk","","",57,N],[11,"new_headers","","",57,[[["self"],["streamid"],["vec",["header"]],["httpconnection"]],["httpresult"]]],[11,"end_of_stream","","",57,[[["self"],["streamid"],["httpconnection"]],["httpresult"]]],[11,"rst_stream","","",57,[[["self"],["streamid"],["errorcode"],["httpconnection"]],["httpresult"]]],[11,"new_settings","","",57,[[["self"],["vec",["httpsetting"]],["httpconnection"]],["httpresult"]]],[11,"on_ping","","",57,[[["self"],["pingframe"],["httpconnection"]],["httpresult"]]],[11,"on_pong","","",57,[[["self"],["pingframe"],["httpconnection"]],["httpresult"]]],[11,"with_connection","","Creates a new `ServerConnection` that will use the given `HttpConnection` for its underlying HTTP/2 communication. The `state` and `factory` represent, respectively, the initial state of the connection and an instance of the `StreamFactory` type (allowing the client to handle newly created streams).",55,[[["httpconnection"],["state"],["f"]],["serverconnection"]]],[11,"scheme","","Returns the scheme of the underlying `HttpConnection`.",55,[[["self"]],["httpscheme"]]],[11,"send_settings","","Send the current settings associated to the `ServerConnection` to the client.",55,[[["self"],["s"]],["httpresult"]]],[11,"expect_settings","","Handles the next frame on the given `ReceiveFrame` instance and expects it to be a (non-ACK) SETTINGS frame. Returns an error if not.",55,[[["self"],["recv"],["sender"]],["httpresult"]]],[11,"handle_next_frame","","Fully handles the next frame provided by the given `ReceiveFrame` instance. Handling the frame can cause the session state of the `ServerConnection` to update.",55,[[["self"],["recv"],["sender"]],["httpresult"]]],[11,"start_response","","Starts a response on the stream with the given ID by sending the given headers.",55,[[["self"],["vec",["header"]],["streamid"],["endstream"],["s"]],["httpresult"]]],[11,"send_next_data","","Queues a new DATA frame onto the underlying `SendFrame`.",55,[[["self"],["s"]],["httpresult",["sendstatus"]]]],[6,"StreamId","solicit::http","An alias for the type that represents the ID of an HTTP/2 stream",N,N],[6,"OwnedHeader","","An alias for the type that represents an HTTP/2 header where both the name and the value is owned.",N,N],[6,"StaticHeader","","A type alias for a `Header` where both the name, as well as the value must have a `'static` lifetime if it is borrowed. Owned parts are allowed.",N,N],[6,"HttpResult","","A convenience `Result` type that has the `HttpError` type as the error type and a generic Ok result type.",N,N],[6,"StaticResponse","","A type alias for a `Response` where all headers' names and values must have a `'static` lifetime if they are borrowed. This means that the parts can also be owned.",N,N],[17,"INITIAL_CONNECTION_WINDOW_SIZE","","The initial size of the connections' flow control window.",N,N],[17,"ALPN_PROTOCOLS","","A set of protocol names that the library should use to indicate that HTTP/2 is supported during protocol negotiation (NPN or ALPN). We include some of the drafts' protocol names, since there is basically no difference for all intents and purposes (and some servers out there still only officially advertise draft support). TODO: Eventually only use \"h2\".",N,N],[11,"fmt","","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",58,[[["vec",["u8"]]],["headerpart"]]],[11,"from","","",58,N],[11,"from","","",58,[[["cow"]],["headerpart"]]],[11,"from","","",58,N],[11,"from","","",58,N],[11,"from","","",58,N],[11,"from","","",58,N],[11,"from","","",58,N],[11,"from","","",58,N],[11,"from","","",58,N],[11,"from","","",58,N],[11,"from","","",58,N],[11,"from","","",58,N],[11,"from","","",58,N],[11,"eq","","",59,[[["self"],["header"]],["bool"]]],[11,"eq","","",60,[[["self"],["ownedheader"]],["bool"]]],[11,"clone","","",60,[[["self"]],["header"]]],[11,"eq","","",60,[[["self"],["header"]],["bool"]]],[11,"ne","","",60,[[["self"],["header"]],["bool"]]],[11,"new","","Creates a new `Header` with the given name and value.",60,[[["n"],["v"]],["header"]]],[11,"name","","Return a borrowed representation of the `Header` name.",60,N],[11,"value","","Return a borrowed representation of the `Header` value.",60,N],[11,"fmt","","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"into","","",60,[[["self"]],["ownedheader"]]],[11,"into","","",59,[[["self"]],["header"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["errorcode"]]],[11,"eq","","",2,[[["self"],["errorcode"]],["bool"]]],[11,"from","","Converts the given `u32` number to the appropriate `ErrorCode` variant.",2,[[["u32"]],["errorcode"]]],[11,"as_ref","","",2,[[["self"]],["str"]]],[11,"into","","",2,[[["self"]],["u32"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"eq","","",61,[[["self"],["connectionerror"]],["bool"]]],[11,"ne","","",61,[[["self"],["connectionerror"]],["bool"]]],[11,"clone","","",61,[[["self"]],["connectionerror"]]],[11,"new","","Creates a new `ConnectionError` with no associated debug data.",61,[[["errorcode"]],["connectionerror"]]],[11,"with_debug_data","","Creates a new `ConnectionError` with the given associated debug data.",61,[[["errorcode"],["vec",["u8"]]],["connectionerror"]]],[11,"error_code","","The error code of the underlying error.",61,[[["self"]],["errorcode"]]],[11,"debug_data","","The debug data attached to the connection error, if any.",61,[[["self"]],["option"]]],[11,"debug_str","","The debug data interpreted as a string, if possible.",61,[[["self"]],["option",["str"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"description","","",61,[[["self"]],["str"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from","","",3,[[["error"]],["httperror"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"cause","","",3,[[["self"]],["option",["error"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"clone","","",62,[[["self"]],["windowsize"]]],[11,"eq","","",62,[[["self"],["windowsize"]],["bool"]]],[11,"ne","","",62,[[["self"],["windowsize"]],["bool"]]],[11,"try_increase","","Tries to increase the window size by the given delta. If the WindowSize would overflow the maximum allowed value (2^31 - 1), returns an error case. If the increase succeeds, returns `Ok`.",62,[[["self"],["u32"]],["result"]]],[11,"try_decrease","","Tries to decrease the size of the window by the given delta.",62,[[["self"],["i32"]],["result"]]],[11,"new","","Creates a new `WindowSize` with the given initial size.",62,[[["i32"]],["windowsize"]]],[11,"size","","Returns the current size of the window.",62,[[["self"]],["i32"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["httpscheme"]]],[11,"eq","","",4,[[["self"],["httpscheme"]],["bool"]]],[11,"as_bytes","","Returns a byte string representing the scheme.",4,N],[11,"clone","","",0,[[["self"]],["response"]]],[11,"new","","Creates a new `Response` with all the components already provided.",0,[[["streamid"],["vec",["ownedheader"]],["vec",["u8"]]],["response"]]],[11,"status_code","","Gets the response status code from the pseudo-header. If the response does not contain the response as the first pseuo-header, an error is returned as such a response is malformed.",0,[[["self"]],["httpresult",["u16"]]]],[11,"clone","","",1,[[["self"]],["request"]]],[0,"client","solicit","The module contains implementations of HTTP/2 clients that could be directly used to access HTTP/2 servers, i.e. send requests and read responses.",N,N],[3,"SimpleClient","solicit::client","A struct implementing a simple HTTP/2 client.",N,N],[3,"Client","","A struct representing an HTTP/2 client that receives responses to its requests asynchronously. Additionally, this client can be cloned and all clones can issue (concurrently) requests to the server, using the same underlying HTTP/2 connection.",N,N],[11,"with_stream","","Creates a new `SimpleClient` instance that will use the given `stream` instance for its underlying communication with the host. Additionally, requires the host identifier and the scheme of the connection.",63,[[["s"],["string"],["httpscheme"]],["httpresult",["simpleclient"]]]],[11,"with_connector","","A convenience constructor that first tries to establish an HTTP/2 connection by using the given connector instance (an implementation of the `HttpConnect` trait).",63,[[["c"]],["httpresult",["simpleclient"]]]],[11,"request","","Send a request to the server. Blocks until the entire request has been sent.",63,N],[11,"get_response","","Gets the response for the stream with the given ID. If a valid stream ID is given, it blocks until a response is received.",63,[[["self"],["streamid"]],["httpresult",["response"]]]],[11,"get","","Performs a GET request on the given path. This is a shortcut method for calling `request` followed by `get_response` for the returned stream ID.",63,N],[11,"post","","Performs a POST request on the given path.",63,N],[11,"clone","","",64,[[["self"]],["client"]]],[11,"drop","","",64,[[["self"]]]],[11,"with_connector","","Creates a brand new HTTP/2 client. This means that a new HTTP/2 connection will be established behind the scenes. A thread is spawned to handle the connection in the background, so that the thread that creates the client can use it asynchronously.",64,[[["c"]],["result",["client","clientconnecterror"]]]],[11,"request","","Issues a new request to the server.",64,N],[11,"get","","Issues a GET request to the server.",64,N],[11,"post","","Issues a POST request to the server.",64,N],[11,"ping","","Sends a PING to the server",64,[[["self"]],["result",["str"]]]],[0,"server","solicit","The module contains a simple HTTP/2 server implementation.",N,N],[3,"ServerRequest","solicit::server","The struct represents a fully received request.",N,N],[12,"stream_id","","",65,N],[12,"headers","","",65,N],[12,"body","","",65,N],[3,"SimpleServer","","The struct implements a simple HTTP/2 server that allows users to register a request handler (a callback taking a `ServerRequest` and returning a `Response`) which is run on all received requests.",N,N],[11,"new","","Creates a new `SimpleServer` that will use the given `TransportStream` to communicate to the client. Assumes that the stream is fully uninitialized -- no preface sent or read yet.",66,[[["ts"],["h"]],["httpresult",["simpleserver"]]]],[11,"handle_next","","Handles the next incoming frame, blocking to receive it if nothing is available on the underlying stream.",66,[[["self"]],["httpresult"]]],[11,"from","solicit::http","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"from","","",61,[[["t"]],["t"]]],[11,"to_string","","",61,[[["self"]],["string"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","solicit::http::frame","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","solicit::http::frame::data","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","solicit::http::frame::headers","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"to_owned","solicit::http::frame::rst_stream","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"to_owned","solicit::http::frame::settings","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"to_owned","solicit::http::frame::goaway","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","solicit::http::frame::ping","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"to_owned","solicit::http::frame::window_update","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","solicit::http::transport","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","solicit::http::connection","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","solicit::http::session","",42,[[["t"]],["t"]]],[11,"into_iter","","",42,[[["self"]],["i"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"from","solicit::http::priority","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"from","solicit::http::client","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"to_string","","",53,[[["self"]],["string"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"from","solicit::http::client::tls","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"to_string","","",51,[[["self"]],["string"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"from","solicit::http::server","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"from","solicit::client","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"from","solicit::server","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]]],"paths":[[3,"Response"],[3,"Request"],[4,"ErrorCode"],[4,"HttpError"],[4,"HttpScheme"],[8,"FrameBuilder"],[3,"DataFrame"],[4,"DataFlag"],[3,"DataChunk"],[3,"StreamDependency"],[3,"HeadersFrame"],[4,"HeadersFlag"],[3,"RstStreamFrame"],[3,"SettingsFrame"],[4,"HttpSetting"],[4,"SettingsFlag"],[3,"GoawayFrame"],[3,"PingFlag"],[3,"PingFrame"],[3,"WindowUpdateFrame"],[8,"FrameIR"],[8,"Flag"],[8,"Frame"],[3,"NoFlag"],[3,"RawFrame"],[8,"TransportStream"],[3,"TransportReceiveFrame"],[3,"HttpConnection"],[3,"DataChunk"],[4,"HttpFrame"],[4,"SendStatus"],[4,"EndStream"],[8,"SendFrame"],[8,"ReceiveFrame"],[3,"HttpConnectionSender"],[3,"DefaultStream"],[4,"StreamState"],[4,"StreamDataError"],[4,"StreamDataChunk"],[8,"Session"],[8,"SessionState"],[8,"Stream"],[3,"StreamIter"],[3,"DefaultSessionState"],[8,"DataPrioritizer"],[3,"SimplePrioritizer"],[3,"ClientStream"],[3,"CleartextConnector"],[3,"RequestStream"],[3,"ClientConnection"],[3,"TlsConnector"],[4,"TlsConnectError"],[8,"HttpConnect"],[3,"CleartextConnectError"],[3,"ClientSession"],[3,"ServerConnection"],[8,"StreamFactory"],[3,"ServerSession"],[3,"HeaderPart"],[6,"OwnedHeader"],[3,"Header"],[3,"ConnectionError"],[3,"WindowSize"],[3,"SimpleClient"],[3,"Client"],[3,"ServerRequest"],[3,"SimpleServer"],[3,"Client"],[3,"Server"]]};
initSearch(searchIndex);
